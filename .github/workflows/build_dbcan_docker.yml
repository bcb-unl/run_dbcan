name: Build and Publish dbCAN Docker Image

on:
  push:
    tags:
      - "v*"
  release:
    types: [published]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  DOCKER_DIR: docker

jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64,amd64


      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:

          driver-opts: |
            image=moby/buildkit:latest
            network=host


      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            # minimal
            type=semver,pattern={{version}}
            # raw with latest tag
            type=raw,value=latest

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}




      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ${{ env.DOCKER_DIR }}/Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          no-cache: false
          platforms: linux/amd64,linux/arm64
          outputs: type=image,name=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          build-args: |
            CONDA_ENV_PATH=/opt/conda/envs/run_dbcan



      - name: Docker image inspection
        run: |
              echo "üìù Image Details:"
              docker buildx imagetools inspect ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:$(echo "${{ steps.meta.outputs.tags }}" | head -n 1 | cut -d ':' -f 2)

      - name: Update deployment status
        run: |

              VERSION=$(echo "${{ steps.meta.outputs.tags }}" | head -n 1 | cut -d ':' -f 2)
              echo "üöÄ Successfully deployed version $VERSION"
              echo "üì¶ Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:$VERSION"
              echo "üîó Docker pull command:"
              echo "    docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:$VERSION"
              echo "üíª Supported architectures:"
              echo "    - linux/amd64 (Intel/AMD 64-bit)"
              echo "    - linux/arm64 (ARM 64-bit / Apple Silicon)"
